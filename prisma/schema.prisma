// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CartItem {
  id       Int    @id @default(autoincrement())
  userId   Int
  user     User   @relation(fields: [userId], references: [id])
  shoeId   Int
  shoe     Shoe   @relation(fields: [shoeId], references: [id])
  quantity Int

  @@index([userId])
  @@index([shoeId])
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
  cartItems CartItem[] // Add this line
}

model Shoe {
  id          Int      @id @default(autoincrement())
  name        String
  brand       String
  price       Float
  size        Float
  color       String
  stock       Int
  imageUrl    String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cartItems   CartItem[] // Add this line
}

model Order {
  id        Int          @id @default(autoincrement())
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
  total     Float
  status    OrderStatus  @default(PENDING)
  items     OrderItem[]  @relation("OrderToOrderItem")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
    // Add these new fields for Midtrans integration
  paymentId    String?      @unique // Midtrans transaction ID
  paymentUrl   String?      // Midtrans payment page URL
  paymentMethod String?     // Payment method used
  paymentTime  DateTime?    // When payment was completed
  snapToken    String?      // For Snap redirect payments
}

model OrderItem {
  id       Int    @id @default(autoincrement())
  orderId  Int
  order    Order  @relation("OrderToOrderItem", fields: [orderId], references: [id], onDelete: Cascade)
  shoeId   Int
  quantity Int
  price    Float
}

enum OrderStatus {
  PENDING
  WAITING_FOR_PAYMENT
  PAYMENT_FAILED
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}