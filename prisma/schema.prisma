generator client {
  provider = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}



datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [vector]
}

model CartItem {
  id       Int  @id @default(autoincrement())
  userId   Int
  shoeId   Int
  quantity Int
  shoe     Shoe @relation(fields: [shoeId], references: [id])
  user     User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([shoeId])
}

model User {
  id                  Int           @id @default(autoincrement())
  email               String        @unique
  password            String
  name                String
  role                UserRole      @default(CUSTOMER)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  sellerRequestStatus String?
  sellerRequestDate   DateTime?
  sellerRequestInfo   String?
  cartItems           CartItem[]
  chatSessions        ChatSession[]
  orders              Order[]
  products            Shoe[]
}

model Shoe {
  id          Int               @id @default(autoincrement())
  name        String
  brand       String
  price       Float
  size        Float
  color       String
  stock       Int
  imageUrl    String?
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  createdBy   Int?
  cartItems   CartItem[]
  embedding   ProductEmbedding?
  creator     User?             @relation(fields: [createdBy], references: [id])
}

model Order {
  id             Int         @id @default(autoincrement())
  userId         Int
  total          Float
  status         OrderStatus @default(PENDING)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  shippingMethod String?
  shippingFee    Float?
  paymentId      String?     @unique
  paymentUrl     String?
  paymentMethod  String?
  paymentTime    DateTime?
  snapToken      String?
  currency       String?
  exchangeRate   Float?
  user           User        @relation(fields: [userId], references: [id])
  items          OrderItem[] @relation("OrderToOrderItem")
}

model ExchangeRate {
  currency  String   @id
  rate      Float
  updatedAt DateTime @default(now())
  updatedBy String?
}

model OrderItem {
  id       Int   @id @default(autoincrement())
  orderId  Int
  shoeId   Int
  quantity Int
  price    Float
  order    Order @relation("OrderToOrderItem", fields: [orderId], references: [id], onDelete: Cascade)
}

model ChatSession {
  id           String        @id @default(cuid())
  userId       Int?
  sessionToken String        @unique
  startedAt    DateTime      @default(now())
  lastActiveAt DateTime      @default(now())
  active       Boolean       @default(true)
  metadata     Json?
  messages     ChatMessage[]
  user         User?         @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([active])
}

model ChatMessage {
  id         String      @id @default(cuid())
  sessionId  String
  content    String
  isFromUser Boolean
  timestamp  DateTime    @default(now())
  metadata   Json?
  session    ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([timestamp])
}

model ProductEmbedding {
  id        Int      @id
  shoe      Shoe     @relation(fields: [id], references: [id], onDelete: Cascade)
  embedding Unsupported("extensions.vector(512)") // For pgvector
  updatedAt DateTime @default(now())
}
enum OrderStatus {
  PENDING
  WAITING_FOR_PAYMENT
  PAYMENT_FAILED
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum UserRole {
  CUSTOMER
  SELLER
  SUPERADMIN
}
