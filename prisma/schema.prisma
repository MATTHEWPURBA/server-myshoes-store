// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CartItem {
  id       Int    @id @default(autoincrement())
  userId   Int
  user     User   @relation(fields: [userId], references: [id])
  shoeId   Int
  shoe     Shoe   @relation(fields: [shoeId], references: [id])
  quantity Int

  @@index([userId])
  @@index([shoeId])
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(CUSTOMER)  // Add this field!
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  
  orders    Order[]
  cartItems CartItem[] // Add this line

    // Add these new fields
  products  Shoe[]    // Products created by this user
  // For seller requests
  sellerRequestStatus String?  // "PENDING", "APPROVED", "REJECTED"
  sellerRequestDate   DateTime?
  sellerRequestInfo   String?  // Additional information for becoming a seller

}

model Shoe {
  id          Int      @id @default(autoincrement())
  name        String
  brand       String
  price       Float
  size        Float
  color       String
  stock       Int
  imageUrl    String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cartItems   CartItem[] // Add this line

   // Add this relationship
  createdBy   Int?
  creator     User?     @relation(fields: [createdBy], references: [id])

}

model Order {
  id        Int          @id @default(autoincrement())
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
  total     Float
  status    OrderStatus  @default(PENDING)
  items     OrderItem[]  @relation("OrderToOrderItem")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  
  // Add shipping details
  shippingMethod String?     // 'standard', 'express', etc.
  shippingFee    Float?      // The shipping fee amount
  
  // Payment fields
  paymentId    String?      @unique // Midtrans transaction ID
  paymentUrl   String?      // Midtrans payment page URL
  paymentMethod String?     // Payment method used
  paymentTime  DateTime?    // When payment was completed
  snapToken    String?      // For Snap redirect payments

  // Currency fields
  currency     String?      // Payment currency code
  exchangeRate Float?       // Exchange rate at payment time
}

model ExchangeRate {
  currency    String   @id
  rate        Float
  updatedAt   DateTime @default(now())
  updatedBy   String?
}


model OrderItem {
  id       Int    @id @default(autoincrement())
  orderId  Int
  order    Order  @relation("OrderToOrderItem", fields: [orderId], references: [id], onDelete: Cascade)
  shoeId   Int
  quantity Int
  price    Float
}

enum OrderStatus {
  PENDING
  WAITING_FOR_PAYMENT
  PAYMENT_FAILED
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}


enum UserRole {
  CUSTOMER
  SELLER
  SUPERADMIN
}
